declare_args() {
  arm_none_eabi_gcc_pkg = "toolchins/arm_none_eabi_gcc-${host_os}-${host_cpu}"
  arm_none_eabi_gcc_ver = "latest"
  arm_none_eabi_gcc_api = "https://api.github.com/repos/xpack-dev-tools/arm-none-eabi-gcc-xpack/releases"
  arm_none_eabi_gcc_url = "https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack/releases/download/v{version}/xpack-arm-none-eabi-gcc-{version}"

  if (host_os == "windows") {
    arm_none_eabi_gcc_url += "-win32-x64.zip"
  } else if (host_os == "linux") {
    if (host_cpu == "arm64") {
      arm_none_eabi_gcc_url += "-linux-arm64.tar.gz"
    } else {
      arm_none_eabi_gcc_url += "-linux-x64.tar.gz"
    }
  } else if (host_os == "mac") {
    if (host_cpu == "arm64") {
      arm_none_eabi_gcc_url += "-darwin-arm64.tar.gz"
    } else {
      arm_none_eabi_gcc_url += "-darwin-arm64.tar.gz"
    }
  }
}

declare_args() {
  if (!defined(arm_none_eabi_gcc_dir)) {
    arm_none_eabi_gcc_ret = exec_script("${mds_script_dir}/package.py",
                                        [
                                          "${arm_none_eabi_gcc_pkg}",
                                          "-u=${arm_none_eabi_gcc_url}",
                                          "-v=${arm_none_eabi_gcc_ver}",
                                          "-a=${arm_none_eabi_gcc_api}",
                                          "-m=tag_name:v(.*)",
                                          "-d=${mds_download_dir}",
                                          "-p=${mds_package_dir}",
                                        ],
                                        "string")
  }
}

declare_args() {
  if (!defined(arm_none_eabi_gcc_dir)) {
    print("package ${arm_none_eabi_gcc_pkg}-${arm_none_eabi_gcc_ret}")
    arm_none_eabi_gcc_dir = "${mds_package_dir}/${arm_none_eabi_gcc_pkg}/${arm_none_eabi_gcc_ret}/xpack-arm-none-eabi-gcc-${arm_none_eabi_gcc_ret}/bin/"
  }
}

template("arm_none_eabi_toolchain") {
  not_needed(invoker, "*")
  assert(defined(arm_none_eabi_gcc_dir))

  toolchain(target_name) {
    asm = rebase_path("arm-none-eabi-gcc", "", arm_none_eabi_gcc_dir)
    cc = rebase_path("arm-none-eabi-gcc", "", arm_none_eabi_gcc_dir)
    cxx = rebase_path("arm-none-eabi-g++", "", arm_none_eabi_gcc_dir)
    alink = rebase_path("arm-none-eabi-ar", "", arm_none_eabi_gcc_dir)
    solink = rebase_path("arm-none-eabi-g++", "", arm_none_eabi_gcc_dir)
    link = rebase_path("arm-none-eabi-g++", "", arm_none_eabi_gcc_dir)

    lib_switch = "-l"
    lib_dir_switch = "-L"

    tool("asm") {
      depfile = "{{output}}.d"
      command = "$asm -MMD -MF ${depfile} {{defines}} {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "AS {{output}}"
      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }

    tool("cc") {
      depfile = "{{output}}.d"
      command = "$cc -MMD -MF ${depfile} {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC {{output}}"
      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      command = "$cxx -MMD -MF ${depfile} {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CXX {{output}}"
      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }

    tool("alink") {
      outname = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/$outname"

      rspfile = outname + ".rsp"
      rspfile_content = "{{inputs}}"

      command = "$alink rcsD {{arflags}} {{output}} @${rspfile}"
      description = "AR $outname"
      outputs = [ outfile ]

      default_output_dir = "{{target_out_dir}}"
      default_output_extension = ".a"
      output_prefix = "lib"
    }

    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"
      sofile = "{{output_dir}}/$soname"

      rspfile = "${soname}.rsp"
      rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}}"

      command = "$solink -shared {{ldflags}} -o ${sofile} -Wl,-soname=$soname @${rspfile}"
      description = "SOLINK $soname"
      outputs = [ sofile ]

      link_output = sofile
      depend_output = sofile

      # default_output_dir = "{{root_out_dir}}"
      default_output_extension = ".so"
      output_prefix = "lib"
    }

    tool("link") {
      outname = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/$outname"

      rspfile = "${outfile}.rsp"
      rspfile_content = "{{inputs}}"

      command = "$link {{ldflags}} -o ${outfile} -Wl,--start-group @${rspfile} {{libs}} {{solibs}} -Wl,--end-group"
      description = "LINK $outfile"
      outputs = [ outfile ]

      default_output_dir = "{{root_out_dir}}"
      default_output_extension = ".elf"
    }

    tool("stamp") {
      if (host_os == "win") {
        command = "type nul > {{output}}"
      } else {
        command = "touch {{output}}"
      }
      description = "STAMP {{output}}"
    }

    tool("copy") {
      if (host_os == "win") {
        command = "xcopy /-Y  {{source}} {{output}}"
      } else {
        command = "cp -af {{source}} {{output}}"
      }
      description = "COPY {{source}} {{output}}"
    }
  }
}

template("arm_none_eabi_action") {
  assert(invoker.action != "")
  assert(defined(arm_none_eabi_gcc_dir))

  action(target_name) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "script",
                             "args",
                           ])

    script = "${mds_script_dir}/run.py"
    args = [ rebase_path(invoker.action, "", arm_none_eabi_gcc_dir) ]

    if (defined(invoker.args)) {
      args += invoker.args
    }
  }
}
