declare_args() {
  arm_none_eabi_gcc_pkgdef = ""
  arm_none_eabi_gcc_pkgver = "latest"
  arm_none_eabi_gcc_pkgurl = "https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack/releases/download/v{version}/xpack-arm-none-eabi-gcc-{version}"
  arm_none_eabi_gcc_pkgapi = "https://api.github.com/repos/xpack-dev-tools/arm-none-eabi-gcc-xpack/releases"

  if (host_os == "windows") {
    arm_none_eabi_gcc_pkgurl += "-win32-x64.zip"
  } else if (host_os == "linux") {
    if (host_cpu == "arm64") {
      arm_none_eabi_gcc_pkgurl += "-linux-arm64.tar.gz"
    } else {
      arm_none_eabi_gcc_pkgurl += "-linux-x64.tar.gz"
    }
  } else if (host_os == "mac") {
    if (host_cpu == "arm64") {
      arm_none_eabi_gcc_pkgurl += "-darwin-arm64.tar.gz"
    } else {
      arm_none_eabi_gcc_pkgurl += "-darwin-arm64.tar.gz"
    }
  }
}

declare_args() {
  if (arm_none_eabi_gcc_pkgdef == "") {
    print(">> package 'arm_none_eabi_gcc' @ ${arm_none_eabi_gcc_pkgver}")
    arm_none_eabi_gcc_pkgdir =
        exec_script("${mds_build_dir}/scripts/package.py",
                    [
                      "arm_none_eabi_gcc-${host_os}-${host_cpu}",
                      "-v=${arm_none_eabi_gcc_pkgver}",
                      "-u=${arm_none_eabi_gcc_pkgurl}",
                      "-a=${arm_none_eabi_gcc_pkgapi}",
                      "-m=tag_name:v(.*)",
                      "-p=xpack-arm-none-eabi-gcc-{version}/bin/",
                    ],
                    "string")
  } else {
    print("<< package 'arm_none_eabi_gcc' in ${arm_none_eabi_gcc_pkgdef}")
    arm_none_eabi_gcc_pkgdir = arm_none_eabi_gcc_pkgdef
  }
}

template("arm_none_eabi_toolchain") {
  toolchain(target_name) {
    ccache = exec_script("${mds_build_dir}/scripts/which.py",
                         [ "ccache" ],
                         "string")

    if (defined(invoker.prefix)) {
      prefix = invoker.prefix
    } else {
      prefix = "arm-none-eabi-"
    }

    asm = rebase_path("${prefix}gcc", "", arm_none_eabi_gcc_pkgdir)
    cc = rebase_path("${prefix}gcc", "", arm_none_eabi_gcc_pkgdir)
    cxx = rebase_path("${prefix}g++", "", arm_none_eabi_gcc_pkgdir)
    alink = rebase_path("${prefix}ar", "", arm_none_eabi_gcc_pkgdir)
    solink = rebase_path("${prefix}g++", "", arm_none_eabi_gcc_pkgdir)
    link = rebase_path("${prefix}g++", "", arm_none_eabi_gcc_pkgdir)

    lib_switch = "-l"
    lib_dir_switch = "-L"

    tool("asm") {
      depfile = "{{output}}.d"
      command = "${ccache} ${asm} -MMD -MF ${depfile} {{defines}} {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "AS {{output}}"
      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }

    tool("cc") {
      depfile = "{{output}}.d"
      command = "${ccache} ${cc} -MMD -MF ${depfile} {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC {{output}}"
      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      command = "${ccache} ${cxx} -MMD -MF ${depfile} {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CXX {{output}}"
      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }

    tool("alink") {
      outname = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/$outname"

      rspfile = outname + ".rsp"
      rspfile_content = "{{inputs}}"

      command = "${ccache} ${alink} rcs {{arflags}} {{output}} {{inputs}}"
      description = "AR $outname"
      outputs = [ outfile ]

      default_output_dir = "{{target_out_dir}}"
      default_output_extension = ".a"
      output_prefix = "lib"
    }

    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"
      sofile = "{{output_dir}}/$soname"

      command = "${ccache} ${solink} -shared {{ldflags}} -o ${sofile} {{inputs}} {{solibs}} {{libs}}"
      description = "SOLINK $soname"
      outputs = [ sofile ]

      link_output = sofile
      depend_output = sofile

      default_output_dir = "{{root_out_dir}}"
      default_output_extension = ".so"
      output_prefix = "lib"
    }

    tool("link") {
      outname = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/$outname"

      command = "${ccache} ${link} {{ldflags}} -o ${outfile} {{inputs}} {{libs}} {{solibs}}"
      description = "LINK $outfile"
      outputs = [ outfile ]

      default_output_dir = "{{root_out_dir}}"
      default_output_extension = ".elf"
    }

    tool("stamp") {
      if (host_os == "win") {
        command = "type nul > {{output}}"
      } else {
        command = "touch {{output}}"
      }
      description = "STAMP {{output}}"
    }

    tool("copy") {
      if (host_os == "win") {
        command = "xcopy /-Y  {{source}} {{output}}"
      } else {
        command = "cp -af {{source}} {{output}}"
      }
      description = "COPY {{source}} {{output}}"
    }
  }
}

template("arm_none_eabi_action") {
  action(target_name) {
    assert(invoker.script != "")
    forward_variables_from(invoker,
                           "*",
                           [
                             "script",
                             "args",
                           ])

    script = "${mds_build_dir}/scripts/run.py"

    if (defined(invoker.prefix)) {
      args = [ rebase_path(invoker.prefix + invoker.script,
                           "",
                           arm_none_eabi_gcc_pkgdir) ]
    } else {
      args = [ rebase_path("arm-none-eabi-" + invoker.script,
                           "",
                           arm_none_eabi_gcc_pkgdir) ]
    }

    if (defined(invoker.args)) {
      args += invoker.args
    }
  }
}
