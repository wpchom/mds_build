template("gcc_toolchain") {
  toolchain(target_name) {
    not_needed(invoker, "*")

    if (defined(invoker.ccache)) {
      ccache = invoker.ccache
    } else {
      ccache = exec_script("${mds_build_dir}/scripts/which.py",
                           [ "ccache" ],
                           "string")
    }

    if (defined(invoker.prefix)) {
      prefix = invoker.prefix
    } else {
      prefix = ""
    }

    if (defined(invoker.bindir)) {
      asm = rebase_path("${prefix}gcc", "", invoker.bindir)
      cc = rebase_path("${prefix}gcc", "", invoker.bindir)
      cxx = rebase_path("${prefix}g++", "", invoker.bindir)
      alink = rebase_path("${prefix}ar", "", invoker.bindir)
      solink = rebase_path("${prefix}g++", "", invoker.bindir)
      link = rebase_path("${prefix}g++", "", invoker.bindir)
    } else {
      asm = "${prefix}gcc"
      cc = "${prefix}gcc"
      cxx = "${prefix}g++"
      alink = "${prefix}ar"
      solink = "${prefix}g++"
      link = "${prefix}g++"
    }

    lib_switch = "-l"
    lib_dir_switch = "-L"

    whole_archive_flag = "-Wl,--whole-archive"
    no_whole_archive_flag = "-Wl,--no-whole-archive"

    gcc_version = exec_script("${mds_build_dir}/scripts/run.py",
                              [
                                "${cc}",
                                "--version",
                              ],
                              "string")
    foreach(str, string_split(gcc_version, " ")) {
      if (str == "clang") {
        whole_archive_flag = ""
        no_whole_archive_flag = ""
      }
    }

    tool("asm") {
      depfile = "{{output}}.d"
      depsformat = "gcc"

      command = "${ccache} ${asm} -MMD -MF ${depfile} {{defines}} {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
      description = "AS {{output}}"

      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }

    tool("cc") {
      depfile = "{{output}}.d"
      depsformat = "gcc"

      command = "${ccache} ${cc} -MMD -MF ${depfile} {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      description = "CC {{output}}"

      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      depsformat = "gcc"

      command = "${ccache} ${cxx} -MMD -MF ${depfile} {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      description = "CXX {{output}}"

      outputs = [ "{{source_out_dir}}/{{source_name_part}}.o" ]
    }

    tool("alink") {
      command = "${ccache} ${alink} {{arflags}} -rcsD {{output}} {{inputs}}"
      description = "AR {{output}}"

      outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
      default_output_dir = "{{target_out_dir}}"
      default_output_extension = ".a"
      output_prefix = "lib"
    }

    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"
      sofile = "{{output_dir}}/${soname}"

      if (whole_archive_flag == "") {
        soname_flag = ""
        rspfile_flag = "{{inputs}} {{solibs}} {{libs}}"
      } else {
        soname_flag = "-Wl,-soname,${soname}"
        rspfile_flag = "-Wl,--start-group -Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}} -Wl,--end-group"
      }

      command = "${ccache} ${solink} -shared {{ldflags}} ${soname_flag} -o \"${sofile}\" ${rspfile_flag}"
      description = "SOLINK ${sofile}"

      link_output = sofile
      depend_output = sofile

      outputs = [ sofile ]
      default_output_dir = "{{root_out_dir}}"
      default_output_extension = ".so"
      output_prefix = "lib"
    }

    tool("link") {
      outname = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/${outname}"

      if (whole_archive_flag == "") {
        rspfile_flag = "{{inputs}} {{solibs}} {{libs}}"
      } else {
        rspfile_flag = "-Wl,--start-group -Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}} -Wl,--end-group"
      }

      command =
          "${ccache} ${link} {{ldflags}} -o \"${outfile}\" ${rspfile_flag}"
      description = "LINK ${outfile}"

      outputs = [ outfile ]
      default_output_dir = "{{root_out_dir}}"
      default_output_extension = ".elf"
    }

    tool("stamp") {
      if (host_os == "win") {
        command = "type nul > {{output}}"
      } else {
        command = "touch {{output}}"
      }
      description = "STAMP {{output}}"
    }

    tool("copy") {
      if (host_os == "win") {
        command = "xcopy /-Y  {{source}} {{output}}"
      } else {
        command = "cp -af {{source}} {{output}}"
      }
      description = "COPY {{source}} {{output}}"
    }
  }
}

template("gcc_action") {
  action(target_name) {
    assert(invoker.script != "")
    forward_variables_from(invoker,
                           "*",
                           [
                             "script",
                             "args",
                           ])

    script = "${mds_build_dir}/scripts/run.py"
    args = []

    if (defined(invoker.bindir)) {
      if (defined(invoker.prefix)) {
        args +=
            [ rebase_path(invoker.prefix + invoker.script, "", invoker.bindir) ]
      } else {
        args += [ rebase_path(invoker.script, "", invoker.bindir) ]
      }
    } else {
      if (defined(invoker.prefix)) {
        args += [ invoker.prefix + invoker.script ]
      } else {
        args += [ invoker.script ]
      }
    }

    if (defined(invoker.args)) {
      args += invoker.args
    }
  }
}
